# -*- coding: utf-8 -*-
"""co2-emissions-prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V8wMAUpzMwOumZeGldJcoJXIM1D_gcCb

# <div style="text-align:center; padding:15px; color:white; margin:0; font-size:150%; font-family:'Times New Roman'; background-color:#FF7D33   ; overflow:hidden"><b>Import libraries and load data</b></div>
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import warnings
warnings.filterwarnings("ignore")

df=pd.read_csv("/kaggle/input/vehicle-co2-emissions-dataset/co2.csv")
print(df.info())
print(df.isnull().sum())
print(df.head(15))

df.rename(columns={'Make': 'Brand'}, inplace=True)
print(df.head())

"""# <div style="text-align:center; padding:15px; color:white; margin:0; font-size:150%; font-family:'Times New Roman'; background-color:#FF7D33   ; overflow:hidden"><b>EDA</b></div>"""

print(df.describe())

df.hist(bins=30, figsize=(15, 10))
plt.tight_layout()
plt.show()

plt.figure(figsize=(15, 10))
sns.countplot(y='Brand', data=df, order=df['Brand'].value_counts().index)
plt.title('Distribution of Brand')
plt.show()

plt.figure(figsize=(15, 10))
sns.countplot(y='Vehicle Class', data=df, order=df['Vehicle Class'].value_counts().index)
plt.title('Distribution of Vehicle Class')
plt.show()

plt.figure(figsize=(15, 10))
sns.countplot(y='Transmission', data=df, order=df['Transmission'].value_counts().index)
plt.title('Distribution of Transmission')
plt.show()

plt.figure(figsize=(15, 10))
sns.countplot(y='Fuel Type', data=df, order=df['Fuel Type'].value_counts().index)
plt.title('Distribution of Fuel Type')
plt.show()

plt.figure(figsize=(15, 6))
sns.boxplot(x='Brand', y='CO2 Emissions(g/km)', data=df)
plt.xticks(rotation=90)
plt.title('CO2 Emissions by Brand')
plt.show()

plt.figure(figsize=(15, 6))
sns.boxplot(x='Vehicle Class', y='CO2 Emissions(g/km)', data=df)
plt.xticks(rotation=90)
plt.title('CO2 Emissions by Vehicle Class')
plt.show()

plt.figure(figsize=(15, 6))
sns.boxplot(x='Transmission', y='CO2 Emissions(g/km)', data=df)
plt.xticks(rotation=90)
plt.title('CO2 Emissions by Transmission')
plt.show()

plt.figure(figsize=(15, 6))
sns.boxplot(x='Fuel Type', y='CO2 Emissions(g/km)', data=df)
plt.xticks(rotation=90)
plt.title('CO2 Emissions by Fuel Type')
plt.show()

sns.pairplot(df[['Engine Size(L)', 'Cylinders', 'Fuel Consumption City (L/100 km)',
                 'Fuel Consumption Hwy (L/100 km)', 'Fuel Consumption Comb (L/100 km)',
                 'Fuel Consumption Comb (mpg)', 'CO2 Emissions(g/km)']])
plt.show()

plt.figure(figsize=(12, 6))
sns.scatterplot(x='Engine Size(L)', y='CO2 Emissions(g/km)', hue='Fuel Type', data=df)
plt.title('Engine Size vs CO2 Emissions')
plt.show()

plt.figure(figsize=(12, 6))
sns.scatterplot(x='Fuel Consumption Comb (L/100 km)', y='CO2 Emissions(g/km)', hue='Fuel Type', data=df)
plt.title('Fuel Consumption Comb vs CO2 Emissions')
plt.show()

"""# <div style="text-align:center; padding:15px; color:white; margin:0; font-size:150%; font-family:'Times New Roman'; background-color:#FF7D33   ; overflow:hidden"><b>Model</b></div>"""

X = df.drop('CO2 Emissions(g/km)', axis=1)
y = df['CO2 Emissions(g/km)']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

numeric_features = ['Engine Size(L)', 'Cylinders', 'Fuel Consumption City (L/100 km)',
                    'Fuel Consumption Hwy (L/100 km)', 'Fuel Consumption Comb (L/100 km)',
                    'Fuel Consumption Comb (mpg)']

numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())
])


categorical_features = ['Brand', 'Model', 'Vehicle Class', 'Transmission', 'Fuel Type']

categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])


preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ])

model = Pipeline(steps=[('preprocessor', preprocessor),
                        ('regressor', LinearRegression())])


model.fit(X_train, y_train)
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse:.2f}')
print(f'R^2 Score: {r2:.2f}')
print(f'Root Mean Squared Error: {rmse:.2f}')

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, edgecolors=(0, 0, 0))
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)
plt.xlabel('Actual CO2 Emissions (g/km)')
plt.ylabel('Predicted CO2 Emissions (g/km)')
plt.title('Actual vs Predicted CO2 Emissions')
plt.show()

residuals = y_test - y_pred
plt.figure(figsize=(10, 6))
plt.scatter(y_pred, residuals, edgecolors=(0, 0, 0))
plt.axhline(y=0, color='r', linestyle='--')
plt.xlabel('Predicted CO2 Emissions (g/km)')
plt.ylabel('Residuals')
plt.title('Residuals vs Predicted CO2 Emissions')
plt.show()

"""<div style="text-align:center; padding:15px; color:white; margin:0; font-size:150%; font-family:'Times New Roman'; background-color:#FF7D33 ; overflow:hidden">
  <b></b><br>
  If you found this notebook helpful, please consider upvoting it! Thank you!
</div>
"""